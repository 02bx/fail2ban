#!/usr/bin/env python
# This file is part of Fail2Ban.
#
# Fail2Ban is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Fail2Ban is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Fail2Ban; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Author: Cyril Jaquier
# 
# $Revision$

__author__ = "Cyril Jaquier"
__version__ = "$Revision$"
__date__ = "$Date$"
__copyright__ = "Copyright (c) 2004 Cyril Jaquier"
__license__ = "GPL"

import sys, string, os, pickle, re, logging, getopt, time

# Inserts our own modules path first in the list
# fix for bug #343821
sys.path.insert(1, "/usr/lib/fail2ban")

# Now we can import our modules
from version import version
from client.csocket import CSocket
from client.configurator import Configurator

# Gets the instance of the logger.
logSys = logging.getLogger("fail2ban.client")

##
#
# @todo This class needs cleanup.

class Fail2banClient:

	def __init__(self):
		self.argv = None
		self.stream = None
		self.conf = dict()
		self.conf["dump"] = False
		self.conf["force"] = False
	
	def dispUsage(self):
		""" Prints Fail2Ban command line options and exits
		"""
		print "Usage: "+self.argv[0]+" [OPTIONS] <COMMAND>"
		print
		print "Fail2Ban v" + version + " reads log file that contains password failure report"
		print "and bans the corresponding IP addresses using firewall rules."
		print
		print "  -c <DIR>   configuration directory"
		print "  -d         dump configuration"
		print "  -x         force execution of the server"
		print "  -h         display this help message"
		print
		print "Report bugs to <lostcontrol@users.sourceforge.net>"
		sys.exit(0)
	
	def getCmdLineOptions(self, optList):
		""" Gets the command line options
		"""
		for opt in optList:
			if opt[0] == "-d":
				self.conf["dump"] = True
			if opt[0] == "-x":
				self.conf["force"] = True
			if opt[0] in ["-h", "--help"]:
	 			self.dispUsage()
	
	def ping(self):
		return self.processCmd([["ping"]])
	
	@staticmethod
	def processCmd(cmd):
		for c in cmd:
			try:
				client = CSocket()
			except Exception, e:
				logSys.error(e)
				logSys.error("Arrggh... Start the server first")
				return False
			ret = client.send(c)
			if ret[0] == 0:
				logSys.info("OK : " + `ret[1]`)
			else:
				logSys.info("NOK: " + `ret[1].args`)
				return False
		return True
		
	##
	# Process a command line.
	#
	# Process one command line and exit.
	# @param cmd the command line

	def processCommand(self, cmd):
		if self.conf["dump"]:
			self.readConfig()
			self.dumpConfig(self.stream)
			return True
		
		if len(sys.argv) < 2:
			self.dispUsage()
		
		if cmd[0] == "start" and len(cmd) == 1:
			if self.ping():
				logSys.info("Server already running")
				return False
			else:
				self.startServerAsync(self.conf["force"])
				# Read the config while the server is starting
				self.readConfig()
				try:
					# Wait for the server to start
					self.waitOnServer()
					# Configure the server
					self.processCmd(self.stream)
					return True
				except ServerExecutionException:
					logSys.error("Could not start server. Try -x option")
					return False
		elif cmd[0] == "reload" and len(cmd) == 1:
			if self.ping():
				self.readConfig()
				self.processCmd(['stop', 'all'])
				# Configure the server
				self.processCmd(self.stream)
			else:
				logSys.error("Could not find server")
		else:
			return self.processCmd([cmd])
	
	
	##
	# Start Fail2Ban server.
	#
	# Start the Fail2ban server in daemon mode.
	
	def startServerAsync(self, force = False):
		args = list()
		
		args.append("fail2ban-server")
		args.append("-b")
		if force:
			args.append("-x")
		
		pid = os.fork()
		if pid == 0:
			os.execv("fail2ban-server", args)
						
			
	def waitOnServer(self):
		# Wait for the server to start
		cnt = 0
		while not self.ping():
			if cnt > 10:
				raise ServerExecutionException("Failed to start server")
			time.sleep(0.1)
			cnt = cnt + 1
			
	
	def start(self, argv):
		# Command line options
		self.argv = argv
		
		# Reads the command line options.
		try:
			cmdOpts = 'hc:xd'
			cmdLongOpts = ['help']
			optList, args = getopt.getopt(self.argv[1:], cmdOpts, cmdLongOpts)
		except getopt.GetoptError:
			self.dispUsage()
			
		self.getCmdLineOptions(optList)
		
		logSys.setLevel(logging.DEBUG)
		# Add the default logging handler
		stdout = logging.StreamHandler(sys.stdout)
		# set a format which is simpler for console use
		formatter = logging.Formatter('%(name)-16s: %(levelname)-6s %(message)s')
		# tell the handler to use this format
		stdout.setFormatter(formatter)
		logSys.addHandler(stdout)

		self.processCommand(args)

	def readConfig(self):
		# Read the configuration
		cfg = Configurator()
		cfg.setBaseDir("config")
		cfg.readAll()
		cfg.getAllOptions()
		cfg.convertToProtocol()
		self.stream = cfg.getConfigStream()
	
	@staticmethod
	def dumpConfig(cmd):
		for c in cmd:
			print c
		return True


class ServerExecutionException(Exception):
	pass

if __name__ == "__main__":
	client = Fail2banClient()
	client.start(sys.argv)
